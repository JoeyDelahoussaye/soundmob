{"version":3,"sources":["webpack:///./src/app/pipes/youtube.pipe.ts","webpack:///./src/app/services/sound-board.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,yGAAoD;AACpD,yJAAyD;AAMzD,IAAa,WAAW,GAAxB;IAEE,YAAoB,GAAiB;QAAjB,QAAG,GAAH,GAAG,CAAc;IAAG,CAAC;IAEzC,SAAS,CAAC,KAAU,EAAE,IAAU;QAC9B,OAAO,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,KAAK,CAAC;IACvD,CAAC;CAEF;AARY,WAAW;IAHvB,WAAI,CAAC;QACJ,IAAI,EAAE,SAAS;KAChB,CAAC;qCAGyB,+BAAY;GAF1B,WAAW,CAQvB;AARY,kCAAW;;;;;;;;;;;;;;;;;;;;;;;;ACPxB,yGAA2C;AAC3C,uGAAsC;AACtC,wFAAkC;AAKlC,IAAa,iBAAiB,GAA9B;IAEE;QADQ,WAAM,GAAG,EAAE,CAAC,uBAAuB,EAAE,EAAE,UAAU,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC;IAC3D,CAAC;IACjB,SAAS,CAAC,KAAK;QACb,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAEvC,CAAC;IACD,YAAY,CAAC,UAAU;QACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC;IACnD,CAAC;IACD,YAAY;QAEV,IAAI,UAAU,GAAG,IAAI,iBAAU,CAAoB,QAAQ,CAAC,EAAE;YAC5D,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE;gBACpC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AAnBY,iBAAiB;IAJ7B,iBAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;;GAEW,iBAAiB,CAmB7B;AAnBY,8CAAiB","file":"common.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\n@Pipe({\n  name: 'youtube'\n})\nexport class YoutubePipe implements PipeTransform {\n\n  constructor(private dom: DomSanitizer) {}\n\n  transform(value: any, args?: any): any {\n    return this.dom.bypassSecurityTrustResourceUrl(value)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport * as io from 'socket.io-client'\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SoundBoardService {\n  private socket = io('http://localhost:3000', { transports: ['websocket'] })\n  constructor() { }\n  soundEmit(sound) {\n    this.socket.emit('soundEmit', sound);\n\n  }\n  playlistEmit(playlistId) {\n    this.socket.emit('djSelectsPlaylist', playlistId)\n  }\n  soundReceive() {\n\n    let observable = new Observable<{ sound: string }>(observer => {\n      this.socket.on('soundRelay', (data) => {\n        observer.next(data);\n      });\n    });\n    return observable;\n  }\n}\n"],"sourceRoot":""}